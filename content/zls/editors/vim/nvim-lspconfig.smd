---
{
    .title = "nvim-lspconfig",
    .date = @date("2020-04-06T01:00:00"),
    .author = "Sample Author",
    .layout = "zls-docs.shtml",
    .custom = {
      "in-editor-configuration": "Supported",
      "code-action-on-save": "Supported"
    },
}  
---

>## [Warning]($block.attrs('warning'))
>
>The [mason](https://github.com/williamboman/mason.nvim) package manager can only install the latest tagged release of ZLS which should **not** be used with Zig nightly/master.

The following two configs **only** contain the necessary Zig specific configuration. Please refer to [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig) on how to setup everything else like [keybindings](https://github.com/neovim/nvim-lspconfig?tab=readme-ov-file#suggested-configuration) or [autocompletion](https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion).

Install the [vim-plug](https://github.com/junegunn/vim-plug) plugin manager.

```lua
local vim = vim
local Plug = vim.fn['plug#']

vim.call('plug#begin')
  Plug('neovim/nvim-lspconfig') -- https://github.com/neovim/nvim-lspconfig
  Plug('ziglang/zig.vim')       -- https://github.com/ziglang/zig.vim
vim.call('plug#end')

-- don't show parse errors in a separate window
vim.g.zig_fmt_parse_errors = 0
-- disable format-on-save from `ziglang/zig.vim`
vim.g.zig_fmt_autosave = 0
-- enable  format-on-save from nvim-lspconfig + ZLS
--
-- Formatting with ZLS matches `zig fmt`.
-- The Zig FAQ answers some questions about `zig fmt`:
-- https://github.com/ziglang/zig/wiki/FAQ
vim.api.nvim_create_autocmd('BufWritePre',{
  pattern = {"*.zig", "*.zon"},
  callback = function(ev)
    vim.lsp.buf.format()
  end
})

local lspconfig = require('lspconfig')
lspconfig.zls.setup {
  -- Server-specific settings. See `:help lspconfig-setup`

  -- omit the following line if `zls` is in your PATH
  cmd = { '/path/to/zls_executable' },
  -- There are two ways to set config options:
  --   - edit your `zls.json` that applies to any editor that uses ZLS
  --   - set in-editor config options with the `settings` field below.
  --
  -- Further information on how to configure ZLS:
  -- https://zigtools.org/zls/configure/
  settings = {
    zls = {
      -- Whether to enable build-on-save diagnostics
      --
      -- Further information about build-on save:
      -- https://zigtools.org/zls/guides/build-on-save/
      -- enable_build_on_save = true,

      -- Neovim already provides basic syntax highlighting
      semantic_tokens = "partial",

      -- omit the following line if `zig` is in your PATH
      zig_exe_path = '/path/to/zig_executable'
    }
  }
}
```

```vim
call plug#begin('~/.config/nvim/plugged')
  Plug 'neovim/nvim-lspconfig' " https://github.com/neovim/nvim-lspconfig
  Plug 'ziglang/zig.vim'       " https://github.com/ziglang/zig.vim
call plug#end()

" don't show parse errors in a separate window
let g:zig_fmt_parse_errors = 0
" disable format-on-save from `ziglang/zig.vim`
let g:zig_fmt_autosave = 0

" enable format-on-save from nvim-lspconfig + ZLS
"
" Formatting with ZLS matches `zig fmt`.
" The Zig FAQ answers some questions about `zig fmt`:
" https://github.com/ziglang/zig/wiki/FAQ
autocmd BufWritePre *.zig,*.zon lua vim.lsp.buf.format()

:lua << EOF
  local lspconfig = require('lspconfig')
  lspconfig.zls.setup {
    -- Server-specific settings. See `:help lspconfig-setup`

    -- omit the following line if `zls` is in your PATH
    cmd = { '/path/to/zls_executable' },
    -- There are two ways to set config options:
    --   - edit your `zls.json` that applies to any editor that uses ZLS
    --   - set in-editor config options with the `settings` field below.
    --
    -- Further information on how to configure ZLS:
    -- https://zigtools.org/zls/configure/
    settings = {
      zls = {
        -- Whether to enable build-on-save diagnostics
        --
        -- Further information about build-on save:
        -- https://zigtools.org/zls/guides/build-on-save/
        -- enable_build_on_save = true,

        -- omit the following line if `zig` is in your PATH
        zig_exe_path = '/path/to/zig_executable'
      }
    }
  }
EOF
```

## Health Check

To make sure that ZLS is set up as expected, open a `.zig` file and run the following health checks:

```
:checkhealth lspconfig vim.lsp
```

For more information on the health check, refer to [Health check](https://neovim.io/doc/user/health).

## Code Actions on save

### source.fixAll

```lua
vim.api.nvim_create_autocmd('BufWritePre',{
  pattern = {"*.zig", "*.zon"},
  callback = function(ev)
    vim.lsp.buf.code_action({
      context = { only = { "source.fixAll" } },
      apply = true,
    })
  end
})
```

```vim
autocmd BufWritePre *.zig,*.zon lua vim.lsp.buf.code_action({
  context = { only = { "source.fixAll" } },
  apply = true,
})
```

### source.organizeImports

```lua
vim.api.nvim_create_autocmd('BufWritePre',{
  pattern = {"*.zig", "*.zon"},
  callback = function(ev)
    vim.lsp.buf.code_action({
      context = { only = { "source.organizeImports" } },
      apply = true,
    })
  end
})
```

```vim
autocmd BufWritePre *.zig,*.zon lua vim.lsp.buf.code_action({
  context = { only = { "source.organizeImports" } },
  apply = true,
})
```

## Per-project config

Neovim allows setting LSP settings per project via [exrc](https://neovim.io/doc/user/options.html#'exrc').

If the use case for per-project config is to set the path to the Zig or ZLS executable, consider using [direnv](https://direnv.net/) to add it to your `$PATH` or use a version manager for Zig and ZLS.
